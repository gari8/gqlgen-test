// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package resolver is a generated GoMock package.
package resolver

import (
	context "context"
	reflect "reflect"

	domain "github.com/gari8/gqlgen-gorm-tutorial/model/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockITodoRepo is a mock of ITodoRepo interface.
type MockITodoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepoMockRecorder
}

// MockITodoRepoMockRecorder is the mock recorder for MockITodoRepo.
type MockITodoRepoMockRecorder struct {
	mock *MockITodoRepo
}

// NewMockITodoRepo creates a new mock instance.
func NewMockITodoRepo(ctrl *gomock.Controller) *MockITodoRepo {
	mock := &MockITodoRepo{ctrl: ctrl}
	mock.recorder = &MockITodoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepo) EXPECT() *MockITodoRepoMockRecorder {
	return m.recorder
}

// GetTodos mocks base method.
func (m *MockITodoRepo) GetTodos(todos []*domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", todos)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockITodoRepoMockRecorder) GetTodos(todos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockITodoRepo)(nil).GetTodos), todos)
}

// MockITx is a mock of ITx interface.
type MockITx struct {
	ctrl     *gomock.Controller
	recorder *MockITxMockRecorder
}

// MockITxMockRecorder is the mock recorder for MockITx.
type MockITxMockRecorder struct {
	mock *MockITx
}

// NewMockITx creates a new mock instance.
func NewMockITx(ctrl *gomock.Controller) *MockITx {
	mock := &MockITx{ctrl: ctrl}
	mock.recorder = &MockITxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITx) EXPECT() *MockITxMockRecorder {
	return m.recorder
}

// DoInTx mocks base method.
func (m *MockITx) DoInTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInTx indicates an expected call of DoInTx.
func (mr *MockITxMockRecorder) DoInTx(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTx", reflect.TypeOf((*MockITx)(nil).DoInTx), ctx, f)
}

// MockIUserRepo is a mock of IUserRepo interface.
type MockIUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepoMockRecorder
}

// MockIUserRepoMockRecorder is the mock recorder for MockIUserRepo.
type MockIUserRepoMockRecorder struct {
	mock *MockIUserRepo
}

// NewMockIUserRepo creates a new mock instance.
func NewMockIUserRepo(ctrl *gomock.Controller) *MockIUserRepo {
	mock := &MockIUserRepo{ctrl: ctrl}
	mock.recorder = &MockIUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepo) EXPECT() *MockIUserRepoMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *MockIUserRepo) GetUsers() ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserRepoMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserRepo)(nil).GetUsers))
}

// InsertUser mocks base method.
func (m *MockIUserRepo) InsertUser(userId, name string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", userId, name)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockIUserRepoMockRecorder) InsertUser(userId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockIUserRepo)(nil).InsertUser), userId, name)
}
